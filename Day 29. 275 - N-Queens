class Solution {
public:
    void helper(int row, int &n, vector<vector<string>> &ans, vector<string> &sans, unordered_set<int> &columns, unordered_set<int> &mainDiagonals, unordered_set<int> &antiDiagonals) {
        if (row == n) {
            ans.push_back(sans);
            return;
        }
        for (int col = 0; col < n; col++) {
            int mainDiagonalValue = row - col;
            int antiDiagonalValue = row + col;
            if (columns.count(col) || mainDiagonals.count(mainDiagonalValue) || antiDiagonals.count(antiDiagonalValue)) {
                continue;    
            }
            sans[row][col] = 'Q';
            columns.insert(col);
            mainDiagonals.insert(mainDiagonalValue);
            antiDiagonals.insert(antiDiagonalValue);
            helper(row + 1, n, ans, sans, columns, mainDiagonals, antiDiagonals);
            sans[row][col] = '.';
            columns.erase(col);
            mainDiagonals.erase(mainDiagonalValue);
            antiDiagonals.erase(antiDiagonalValue);
        }
    }
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans;
        vector<string> sans(n, string(n, '.'));
        unordered_set<int> columns;
        unordered_set<int> mainDiagonals;
        unordered_set<int> antiDiagonals;
        helper(0, n, ans, sans, columns, mainDiagonals, antiDiagonals);
        return ans;
    }
};

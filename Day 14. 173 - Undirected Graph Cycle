class Solution {
  public:
    // Function to detect cycle in an undirected graph.
    bool DetectCycle(int vertex,vector<bool>&visited,vector<int> adj[])
    {
        queue<pair<int,int>>q;
        q.push(make_pair(vertex,-1));
        visited[vertex]=1;
        while(!q.empty())
        {
            int Node = q.front().first;
            int parent = q.front().second;
            q.pop();
            for(int j=0;j<adj[Node].size();j++)
            {
                if(adj[Node][j]==parent)
                continue;
                if(visited[adj[Node][j]])
                return 1;
                visited[adj[Node][j]]=1;
                q.push(make_pair(adj[Node][j],Node));
            }
        }
        return 0;
    }
    bool isCycle(int V, vector<int> adj[]) {
        vector<bool>visited(V,0);
        for(int i=0;i<V;i++)
        {
            if(!visited[i]&&DetectCycle(i,visited,adj))
            return 1;
        }
        return 0;
    }
};
